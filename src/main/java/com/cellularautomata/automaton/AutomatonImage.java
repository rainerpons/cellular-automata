package com.cellularautomata.automaton;

import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.util.Map;
import javax.swing.JPanel;
import com.cellularautomata.generator.Vector;

/**
 * The <code>AutomatonImage</code> class generates images of an automaton. This class originally
 * creates small images of automatons. When required, it resizes the small images into larger ones.
 * Since the images are entirely composed of black and white pixels, increasing the size of the
 * original images does not ruin the image quality.
 * @author Rainer Pons
 */

public class AutomatonImage extends JPanel {
	/**
	 * Associates the <code>AutomatonImage</code> class with a version number.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Generates a (small) buffered image of an automaton.
	 * @param map associative array of generation count and neighborhood vectors
	 * @return image generated by map
	 */
	public static BufferedImage getImageFromMap(Map<Integer, Vector> map) {
		final int SIZE = map.get(0).getSize();
		BufferedImage image = new BufferedImage(SIZE, SIZE, BufferedImage.TYPE_INT_RGB);
		for (Map.Entry<Integer, Vector> entry : map.entrySet()) {
			String state = entry.getValue().getState();
			for (int i = 0; i < state.length(); i++) {
				int j = entry.getKey();
				if ("1".equals(Character.toString(state.charAt(i)))) {
					image.setRGB(i, j, 0); // set to black
				} else {
					image.setRGB(i, j, 16777215); // set to white
				}
			}
		}
		return image;
	}

	/**
	 * Generates a resized version of a buffered image created by the method
	 * {@link #getImageFromMap(Map)}.
	 * @param width desired width of new image
	 * @param height desired height of new image
	 * @param image image to be resized
	 * @return new image with the desired width and height
	 */
	public static BufferedImage resizeImage(int width, int height, BufferedImage image) {
		BufferedImage resizedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
		Graphics2D graphic = resizedImage.createGraphics();
		graphic.drawImage(image, 0, 0, width, height, null);
		graphic.dispose();
		return resizedImage;
	}

	/**
	 * Creates the name of a file given a rule number and an initial seed.
	 * @param rule local update rule number
	 * @param seed initial neighborhood vector
	 * @return a filename which includes the rule number and initial seed
	 */
	public static String getFileName(int rule, Vector seed) {
		return "rule" + rule + "_seed" + seed.getState() + ".jpg";
	}
}